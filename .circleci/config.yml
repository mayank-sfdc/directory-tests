version: 2.0

jobs:
  checkout_code:
    docker:
      - image: circleci/python:3.6.5
    working_directory: ~/directory-tests
    steps:
      - checkout
      - save_cache:
          key: cached-repo-{{ .Revision }}
          paths:
            - ~/directory-tests

  smoke_tests_requirements:
    docker:
      - image: circleci/python:3.6.5
    working_directory: ~/directory-tests
    steps:
      - restore_cache:
          keys:
            - cached-repo-{{ .Revision }}
      - run:
          name: Create virtualenv and install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements_smoke.txt
      - save_cache:
          key: smoke-tests-dependency-cache-{{ .Revision }}
          paths:
            - ~/directory-tests/venv

  functional_tests_requirements:
    docker:
      - image: circleci/python:3.6.5
    working_directory: ~/directory-tests
    steps:
      - restore_cache:
          keys:
            - cached-repo-{{ .Revision }}
      - run:
          name: Create virtualenv and install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements_functional.txt
            python ./docker/env_writer.py ./docker/env.json
            nodeenv -p
            npm install -g junit-merge@1.2.3
      - save_cache:
          key: functional-tests-dependency-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
          paths:
            - ~/directory-tests/venv
            - ~/directory-tests/docker/.env_with_export
            - ~/directory-tests/docker/.env_without_export

  browser_tests_requirements:
    docker:
      - image: circleci/python:3.6.5
    working_directory: ~/directory-tests
    steps:
      - restore_cache:
          keys:
            - cached-repo-{{ .Revision }}
      - run:
          name: Install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements_browser.txt
            python ./docker/env_writer.py ./docker/env_browser.json
            nodeenv -p
            npm install -g junit-merge@1.2.3
      - save_cache:
          key: browser-tests-dependency-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
          paths:
            - ~/directory-tests/venv
            - ~/directory-tests/docker/.env_with_export
            - ~/directory-tests/docker/.env_without_export

  smoke_tests:
    docker:
      - image: circleci/python:3.6.5
    working_directory: ~/directory-tests
    steps:
      - restore_cache:
          keys:
            - cached-repo-{{ .Revision }}
      - restore_cache:
          keys:
            - smoke-tests-dependency-cache-{{ .Revision }}
      - run:
          name: Run smoke tests
          command: |
            . venv/bin/activate
            python ./docker/env_writer.py ./docker/env.json
            source ./docker/.env_with_export;
            make smoke_tests
      - store_test_results:
          path: ./tests/smoke/reports
      - store_artifacts:
          path: ./tests/smoke/reports

  browser_tests_chrome_selected_scenarios:
    docker:
      - image: circleci/python:3.6.5
    working_directory: ~/directory-tests
    steps:
      - restore_cache:
          keys:
            - cached-repo-{{ .Revision }}
      - restore_cache:
          keys:
            - browser-tests-dependency-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:
          name: Run selected functional scenarios in Chrome (skip examples tagged with @full)
          command: |
            . venv/bin/activate
            source ./docker/.env_with_export;
            export PATH=$PATH:$HOME/bin
            BROWSERS=Chrome VERSIONS=68.0 TAG=-full make browserstack
      - run:
          name: Merge JUnit XML reports
          when: always
          command: |
            python3 -m venv venv
            . venv/bin/activate
            cd ./tests/browser/reports
            junit-merge *.xml -o merged.xml
            ls *.xml | grep -v merged.xml | xargs rm
      - store_test_results:
          path: ./tests/browser/reports
      - store_artifacts:
          path: ./tests/browser/reports

  browser_tests_chrome_all_scenarios:
    docker:
      - image: circleci/python:3.6.5
    working_directory: ~/directory-tests
    steps:
      - restore_cache:
          keys:
            - cached-repo-{{ .Revision }}
      - restore_cache:
          keys:
            - browser-tests-dependency-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:
          name: Run all functional scenarios in Chrome
          command: |
            . venv/bin/activate
            source ./docker/.env_with_export;
            export PATH=$PATH:$HOME/bin
            BROWSERS=Chrome VERSIONS=68.0 make browserstack
      - run:
          name: Merge JUnit XML reports
          when: always
          command: |
            python3 -m venv venv
            . venv/bin/activate
            cd ./tests/browser/reports
            junit-merge *.xml -o merged.xml
            ls *.xml | grep -v merged.xml | xargs rm
      - store_test_results:
          path: ./tests/browser/reports
      - store_artifacts:
          path: ./tests/browser/reports


  browser_tests_firefox_selected_scenarios:
    docker:
      - image: circleci/python:3.6.5
    working_directory: ~/directory-tests
    steps:
      - restore_cache:
          keys:
            - cached-repo-{{ .Revision }}
      - restore_cache:
          keys:
            - browser-tests-dependency-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:
          name: Run selected functional scenarios in Firefox (skip examples tagged with @full)
          command: |
            . venv/bin/activate
            source ./docker/.env_with_export;
            export PATH=$PATH:$HOME/bin
            BROWSERS=Firefox VERSIONS=61.0 TAG=-full make browserstack
      - run:
          name: Merge JUnit XML reports
          when: always
          command: |
            python3 -m venv venv
            . venv/bin/activate
            cd ./tests/browser/reports
            junit-merge *.xml -o merged.xml
            ls *.xml | grep -v merged.xml | xargs rm
      - store_test_results:
          path: ./tests/browser/reports
      - store_artifacts:
          path: ./tests/browser/reports

  browser_tests_firefox_all_scenarios:
    docker:
      - image: circleci/python:3.6.5
    working_directory: ~/directory-tests
    steps:
      - restore_cache:
          keys:
            - cached-repo-{{ .Revision }}
      - restore_cache:
          keys:
            - browser-tests-dependency-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:
          name: Run all functional scenarios in Firefox
          command: |
            . venv/bin/activate
            source ./docker/.env_with_export;
            export PATH=$PATH:$HOME/bin
            BROWSERS=Firefox VERSIONS=61.0 make browserstack
      - run:
          name: Merge JUnit XML reports
          when: always
          command: |
            python3 -m venv venv
            . venv/bin/activate
            cd ./tests/browser/reports
            junit-merge *.xml -o merged.xml
            ls *.xml | grep -v merged.xml | xargs rm
      - store_test_results:
          path: ./tests/browser/reports
      - store_artifacts:
          path: ./tests/browser/reports

  fab_functional_tests:
    docker:
      - image: circleci/python:3.6.5
    working_directory: ~/directory-tests
    steps:
      - restore_cache:
          keys:
            - cached-repo-{{ .Revision }}
      - restore_cache:
          keys:
            - functional-tests-dependency-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:
          name: Run FAB functional tests
          command: |
            python3 -m venv venv
            . venv/bin/activate
            source ./docker/.env_with_export;
            export PATH=$PATH:$HOME/bin
            FEATURE_DIR=fab make functional_tests_feature_dir
      - run:
          name: Merge JUnit XML reports
          when: always
          command: |
            python3 -m venv venv
            . venv/bin/activate
            cd ./tests/functional/reports
            junit-merge *.xml -o merged.xml
            ls *.xml | grep -v merged.xml | xargs rm
      - store_test_results:
          path: ./tests/functional/reports
      - store_artifacts:
          path: ./tests/functional/reports

  fas_functional_tests:
    docker:
      - image: circleci/python:3.6.5
    working_directory: ~/directory-tests
    steps:
      - restore_cache:
          keys:
            - cached-repo-{{ .Revision }}
      - restore_cache:
          keys:
            - functional-tests-dependency-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:
          name: Run FAS functional tests
          command: |
            python3 -m venv venv
            . venv/bin/activate
            source ./docker/.env_with_export;
            export PATH=$PATH:$HOME/bin
            FEATURE_DIR=fas make functional_tests_feature_dir
      - run:
          name: Merge JUnit XML reports
          when: always
          command: |
            python3 -m venv venv
            . venv/bin/activate
            cd ./tests/functional/reports
            junit-merge *.xml -o merged.xml
            ls *.xml | grep -v merged.xml | xargs rm
      - store_test_results:
          path: ./tests/functional/reports
      - store_artifacts:
          path: ./tests/functional/reports

  sso_functional_tests:
    docker:
      - image: circleci/python:3.6.5
    working_directory: ~/directory-tests
    steps:
      - restore_cache:
          keys:
            - cached-repo-{{ .Revision }}
      - restore_cache:
          keys:
            - functional-tests-dependency-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:
          name: Run SSO functional tests
          command: |
            python3 -m venv venv
            . venv/bin/activate
            source ./docker/.env_with_export;
            export PATH=$PATH:$HOME/bin
            FEATURE_DIR=sso make functional_tests_feature_dir
      - run:
          name: Merge JUnit XML reports
          when: always
          command: |
            python3 -m venv venv
            . venv/bin/activate
            cd ./tests/functional/reports
            junit-merge *.xml -o merged.xml
            ls *.xml | grep -v merged.xml | xargs rm
      - store_test_results:
          path: ./tests/functional/reports
      - store_artifacts:
          path: ./tests/functional/reports

  sud_functional_tests:
    docker:
      - image: circleci/python:3.6.5
    working_directory: ~/directory-tests
    steps:
      - restore_cache:
          keys:
            - cached-repo-{{ .Revision }}
      - restore_cache:
          keys:
            - functional-tests-dependency-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:
          name: Run SUD functional tests
          command: |
            python3 -m venv venv
            . venv/bin/activate
            source ./docker/.env_with_export;
            export PATH=$PATH:$HOME/bin
            FEATURE_DIR=sud make functional_tests_feature_dir
      - run:
          name: Merge JUnit XML reports
          when: always
          command: |
            python3 -m venv venv
            . venv/bin/activate
            cd ./tests/functional/reports
            junit-merge *.xml -o merged.xml
            ls *.xml | grep -v merged.xml | xargs rm
      - store_test_results:
          path: ./tests/functional/reports
      - store_artifacts:
          path: ./tests/functional/reports

workflows:
  version: 2

  run_all_tests:
    jobs:
      - checkout_code
      - functional_tests_requirements:
          requires:
            - checkout_code
      - smoke_tests_requirements:
          requires:
            - checkout_code
      - browser_tests_requirements:
          requires:
            - checkout_code
      - smoke_tests:
          requires:
            - checkout_code
            - smoke_tests_requirements
      - browser_tests_chrome_selected_scenarios:
          requires:
            - smoke_tests
            - browser_tests_requirements
      - browser_tests_firefox_selected_scenarios:
          requires:
            - smoke_tests
            - browser_tests_requirements
      - fab_functional_tests:
          requires:
            - smoke_tests
            - functional_tests_requirements
      - fas_functional_tests:
          requires:
            - smoke_tests
            - functional_tests_requirements
      - sso_functional_tests:
          requires:
            - smoke_tests
            - functional_tests_requirements
      - sud_functional_tests:
          requires:
            - smoke_tests
            - functional_tests_requirements

  run_all_browser_scenarios:
    triggers:
    - schedule:
        cron: "0 4 * * 1"
        filters:
          branches:
            only: master
    jobs:
      - checkout_code
      - browser_tests_requirements:
          requires:
            - checkout_code
      - browser_tests_chrome_all_scenarios:
          requires:
            - browser_tests_requirements
      - browser_tests_firefox_all_scenarios:
          requires:
            - browser_tests_requirements
