version: 2

# Variables
load_hatch_rate: &load_hatch_rate
    HATCH_RATE: 3

load_num_clients: &load_num_clients
    NUM_CLIENTS: 40

load_run_time: &load_run_time
    RUN_TIME: 5m

# Machines configs
machine_python3: &machine_python3
  docker:
    - image: circleci/python:3.8.0


# Individual (shared) steps.
step_checkout_repo: &step_checkout_repo
  checkout

step_install_requirements_for_smoke_tests: &step_install_requirements_for_smoke_tests
  run:
    name: Create virtualenv and install dependencies
    command: |
      python3 -m venv venv
      . venv/bin/activate
      pip install --quiet --upgrade pip
      pip install --quiet -r requirements_smoke.txt

step_install_requirements_for_functional_tests: &step_install_requirements_for_functional_tests
  run:
    name: Create virtualenv and install dependencies
    command: |
      python3 -m venv venv
      . venv/bin/activate
      pip install --quiet --upgrade pip
      pip install --quiet -r requirements_functional.txt
      nodeenv -p
      npm install -g junit-merge@1.2.3

step_install_requirements_for_browser_tests: &step_install_requirements_for_browser_tests
  run:
    name: Create virtualenv and install dependencies
    command: |
      python3 -m venv venv
      . venv/bin/activate
      pip install --quiet --upgrade pip
      pip install --quiet -r requirements_browser.txt
      nodeenv -p
      npm install -g junit-merge@2.0.0
      npm install -g allure-commandline@2.13.0

step_install_requirements_for_load_tests: &step_install_requirements_for_load_tests
  run:
    name: Create virtualenv and install dependencies
    command: |
      python3 -m venv venv
      . venv/bin/activate
      pip install --quiet --upgrade pip
      pip install --quiet -r requirements_load.txt

step_cache_smoke_tests_requirements: &step_cache_smoke_tests_requirements
  save_cache:
    key: smoke-tests-dependency-cache-{{ .Revision }}
    paths:
      - ~/directory-tests

step_cache_functional_tests_requirements: &step_cache_functional_tests_requirements
  save_cache:
    key: functional-tests-dependency-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
    paths:
      - ~/directory-tests

step_cache_browser_tests_requirements: &step_cache_browser_tests_requirements
  save_cache:
    key: browser-tests-dependency-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
    paths:
      - ~/directory-tests

step_cache_load_tests_requirements: &step_cache_load_tests_requirements
  save_cache:
    key: load-tests-dependency-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
    paths:
    - ~/directory-tests

step_restore_cached_smoke_tests_requirements: &step_restore_cached_smoke_tests_requirements
  restore_cache:
    keys:
      - smoke-tests-dependency-cache-{{ .Revision }}

step_restore_cached_browser_tests_requirements: &step_restore_cached_browser_tests_requirements
  restore_cache:
    keys:
      - browser-tests-dependency-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}

step_restore_cached_functional_tests_requirements: &step_restore_cached_functional_tests_requirements
  restore_cache:
    keys:
      - functional-tests-dependency-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}

step_restore_cached_load_tests_requirements: &step_restore_cached_load_tests_requirements
  restore_cache:
    keys:
    - load-tests-dependency-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}

step_run_smoke_tests: &step_run_smoke_tests
  run:
    name: Run smoke tests
    command: |
      . venv/bin/activate
      python docker/env_writer.py --env=${TEST_ENV} --config=./docker/env.json
      source ./docker/.env_with_export
      PYTEST_ARGS=${PYTEST_ARGS} make smoke_tests

step_run_functional_tests: &step_run_functional_tests
  run:
    name: Run functional tests
    command: |
      python3 -m venv venv
      . venv/bin/activate
      python ./docker/env_writer.py --env=${TEST_ENV} --config=./docker/env.json
      source ./docker/.env_with_export;
      export PATH=$PATH:$HOME/bin
      FEATURE_DIR=${FEATURE_DIR} TAGS="${TAGS}" make functional_tests_feature_dir

step_delete_test_data: &step_delete_test_data
  run:
    name: Delete form submissions, SSO accounts & companies created by automated tests
    when: always
    command: |
      . venv/bin/activate
      python ./docker/env_writer.py --env=${TEST_ENV} --config=./docker/env.json
      source ./docker/.env_with_export;
      export PATH=$PATH:$HOME/bin
      ./delete_test_data.py

step_run_browser_tests: &step_run_browser_tests
  run:
    name: Run all functional scenarios
    command: |
      . venv/bin/activate
      python ./docker/env_writer.py --env=${TEST_ENV} --config=./docker/env.json
      source ./docker/.env_with_export;
      export PATH=$PATH:$HOME/bin
      BROWSER=${BROWSER} TAGS="${TAGS}" make browserstack

step_run_load_tests: &step_run_load_tests
  run:
    name: Run load tests
    command: |
      . venv/bin/activate
      python ./docker/env_writer.py --env=${TEST_ENV} --config=./docker/env.json
      source ./docker/.env_with_export;
      NUM_CLIENTS=${NUM_CLIENTS} HATCH_RATE=${HATCH_RATE} RUN_TIME=${RUN_TIME} make rudimental_load_test_${SERVICE}

step_merge_junit_xml_reports_from_functional_tests: &step_merge_junit_xml_reports_from_functional_tests
  run:
    name: Merge JUnit XML reports & print errors summary
    when: always
    command: |
      python3 -m venv venv
      . venv/bin/activate
      cd ./tests/functional/reports
      junit-merge *.xml -o merged.xml
      ls *.xml | grep -v merged.xml | xargs rm
      cd ../../../
      ./print_error_summary.py --report ./tests/functional/reports/merged.xml

step_merge_junit_xml_reports_from_browser_tests: &step_merge_junit_xml_reports_from_browser_tests
  run:
    name: Merge JUnit XML reports & print errors summary
    when: always
    command: |
      python3 -m venv venv
      . venv/bin/activate
      cd ./tests/browser/reports
      junit-merge *.xml -o merged.xml
      ls *.xml | grep -v merged.xml | xargs rm
      cd ../../../
      ./print_error_summary.py --report ./tests/browser/reports/merged.xml

# this step requires Java 8+ to work.
step_generate_allure_report_for_browser_tests: &step_generate_allure_report_for_browser_tests
  run:
    name: Generate a standaole Allure report from a JUnit XML Browser tests reports
    when: always
    command: |
      python3 -m venv venv
      . venv/bin/activate
      cd ./tests/browser
      allure generate ./reports && {
        mv allure-report/* reports/ && {
          rm -fr allure-report/
        }
      }


# Lists of steps
steps_setup_env_for_smoke_tests: &steps_setup_env_for_smoke_tests
  steps:
    - *step_checkout_repo
    - *step_install_requirements_for_smoke_tests
    - *step_cache_smoke_tests_requirements

steps_setup_env_for_functional_tests: &steps_setup_env_for_functional_tests
  steps:
    - *step_checkout_repo
    - *step_install_requirements_for_functional_tests
    - *step_cache_functional_tests_requirements

steps_setup_env_for_browser_tests: &steps_setup_env_for_browser_tests
  steps:
    - *step_checkout_repo
    - *step_install_requirements_for_browser_tests
    - *step_cache_browser_tests_requirements

steps_setup_env_for_load_tests: &steps_setup_env_for_load_tests
  steps:
  - *step_checkout_repo
  - *step_install_requirements_for_load_tests
  - *step_cache_load_tests_requirements

steps_smoke_tests: &steps_smoke_tests
  steps:
    - *step_restore_cached_smoke_tests_requirements
    - *step_run_smoke_tests
    - store_test_results:
        path: ./tests/smoke/reports
    - store_artifacts:
        path: ./tests/smoke/reports

steps_functional_tests: &steps_functional_tests
  steps:
    - *step_restore_cached_functional_tests_requirements
    - *step_run_functional_tests
    - *step_merge_junit_xml_reports_from_functional_tests
    - store_test_results:
        path: ./tests/functional/reports
    - store_artifacts:
        path: ./tests/functional/reports

steps_delete_test_data: &steps_delete_test_data
  steps:
    - *step_restore_cached_functional_tests_requirements
    - *step_delete_test_data

steps_run_browser_tests: &steps_run_browser_tests
  steps:
    - *step_restore_cached_browser_tests_requirements
    - *step_run_browser_tests
    - *step_merge_junit_xml_reports_from_browser_tests
    - store_test_results:
        path: ./tests/browser/reports
    - store_artifacts:
        path: ./tests/browser/reports

steps_run_load_tests: &steps_run_load_tests
  steps:
  - *step_restore_cached_load_tests_requirements
  - *step_run_load_tests
  - store_artifacts:
      path: ./reports

jobs:
  setup_env_for_smoke_tests:
    working_directory: ~/directory-tests
    <<: [
    *machine_python3,
    *steps_setup_env_for_smoke_tests,
    ]

  setup_env_for_functional_tests:
    working_directory: ~/directory-tests
    <<: [
    *machine_python3,
    *steps_setup_env_for_functional_tests,
    ]

  setup_env_for_browser_tests:
    working_directory: ~/directory-tests
    <<: [
    *machine_python3,
    *steps_setup_env_for_browser_tests,
    ]

  setup_env_for_load_tests:
    working_directory: ~/directory-tests
    <<: [
    *machine_python3,
    *steps_setup_env_for_load_tests,
    ]

  smoke_tests_dev:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "dev"
      PYTEST_ARGS: '-m "not stage and not prod"'
    <<: [
    *machine_python3,
    *steps_smoke_tests,
    ]

  smoke_tests_stage:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "stage"
      PYTEST_ARGS: "-m 'not dev and not prod'"
    <<: [
    *machine_python3,
    *steps_smoke_tests,
    ]

  smoke_tests_uat:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "uat"
      PYTEST_ARGS: "-m 'not dev and not prod'"
    <<: [
    *machine_python3,
    *steps_smoke_tests,
    ]

  func_fas_test_dev:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "dev"
      FEATURE_DIR: "fas"
      TAGS: "--tags=~@stage-only --tags=~@uat-only"
    <<: [
    *machine_python3,
    *steps_functional_tests,
    ]

  func_sso_test_dev:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "dev"
      FEATURE_DIR: "sso"
      TAGS: "--tags=~@stage-only --tags=~@uat-only"
    <<: [
    *machine_python3,
    *steps_functional_tests,
    ]

  func_sud_test_dev:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "dev"
      FEATURE_DIR: "profile"
      TAGS: "--tags=~@stage-only --tags=~@uat-only"
    <<: [
    *machine_python3,
    *steps_functional_tests,
    ]

  func_international_test_dev:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "dev"
      FEATURE_DIR: "international"
      TAGS: "--tags=~@stage-only --tags=~@uat-only"
    <<: [
    *machine_python3,
    *steps_functional_tests,
    ]

  func_fas_test_stage:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "stage"
      FEATURE_DIR: "fas"
      TAGS: "--tags=~@dev-only --tags=~@uat-only"
    <<: [
    *machine_python3,
    *steps_functional_tests,
    ]

  func_sso_test_stage:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "stage"
      FEATURE_DIR: "sso"
      TAGS: "--tags=~@dev-only --tags=~@uat-only"
    <<: [
    *machine_python3,
    *steps_functional_tests,
    ]

  func_sud_test_stage:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "stage"
      FEATURE_DIR: "profile"
      TAGS: "--tags=~@dev-only --tags=~@uat-only"
    <<: [
    *machine_python3,
    *steps_functional_tests,
    ]

  func_international_test_stage:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "stage"
      FEATURE_DIR: "international"
      TAGS: "--tags=~@dev-only --tags=~@uat-only"
    <<: [
    *machine_python3,
    *steps_functional_tests,
    ]

  func_fas_test_uat:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "uat"
      FEATURE_DIR: "fas"
      TAGS: "--tags=~@stage-only"
    <<: [
    *machine_python3,
    *steps_functional_tests,
    ]

  func_sso_test_uat:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "uat"
      FEATURE_DIR: "sso"
      TAGS: "--tags=~@stage-only"
    <<: [
    *machine_python3,
    *steps_functional_tests,
    ]

  func_sud_test_uat:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "uat"
      FEATURE_DIR: "profile"
      TAGS: "--tags=~@stage-only"
    <<: [
    *machine_python3,
    *steps_functional_tests,
    ]

  func_international_test_uat:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "uat"
      FEATURE_DIR: "international"
      TAGS: "--tags=~@stage-only"
    <<: [
    *machine_python3,
    *steps_functional_tests,
    ]

  delete_test_data_dev:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "dev"
    <<: [
    *machine_python3,
    *steps_delete_test_data,
    ]

  delete_test_data_stage:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "stage"
    <<: [
    *machine_python3,
    *steps_delete_test_data,
    ]

  delete_test_data_uat:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "uat"
    <<: [
    *machine_python3,
    *steps_delete_test_data,
    ]

  browser_all_chrome_dev:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "dev"
      BROWSER: "chrome"
      TAGS: "--tags=~@stage-only --tags=~@uat-only --tags=~@eu-exit --tags=~@skip"
    <<: [
    *machine_python3,
    *steps_run_browser_tests,
    ]

  browser_all_firefox_dev:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "dev"
      BROWSER: "firefox"
      TAGS: "--tags=~@stage-only --tags=~@uat-only --tags=~@eu-exit --tags=~@skip --tags=~@skip-in-firefox"
    <<: [
    *machine_python3,
    *steps_run_browser_tests,
    ]

  browser_selected_chrome_dev:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "dev"
      BROWSER: "chrome"
      TAGS: "--tags=~@stage-only --tags=~@uat-only --tags=~@full --tags=~@eu-exit --tags=~@skip"
    <<: [
    *machine_python3,
    *steps_run_browser_tests,
    ]

  browser_selected_firefox_dev:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "dev"
      BROWSER: "firefox"
      TAGS: "--tags=~@stage-only --tags=~@uat-only --tags=~@full --tags=~@eu-exit --tags=~@skip --tags=~@skip-in-firefox"
    <<: [
    *machine_python3,
    *steps_run_browser_tests,
    ]

  browser_all_chrome_stage:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "stage"
      BROWSER: "chrome"
      TAGS: "--tags=~@dev-only --tags=~@uat-only --tags=~@eu-exit --tags=~@skip"
    <<: [
    *machine_python3,
    *steps_run_browser_tests,
    ]

  browser_all_firefox_stage:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "stage"
      BROWSER: "firefox"
      TAGS: "--tags=~@dev-only --tags=~@uat-only --tags=~@eu-exit --tags=~@skip --tags=~@skip-in-firefox"
    <<: [
    *machine_python3,
    *steps_run_browser_tests,
    ]

  browser_selected_chrome_stage:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "stage"
      BROWSER: "chrome"
      TAGS: "--tags=~@full --tags=~@dev-only --tags=~@uat-only --tags=~@eu-exit --tags=~@skip"
    <<: [
    *machine_python3,
    *steps_run_browser_tests,
    ]

  browser_selected_firefox_stage:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "stage"
      BROWSER: "firefox"
      TAGS: "--tags=~@full --tags=~@dev-only --tags=~@uat-only --tags=~@eu-exit --tags=~@skip --tags=~@skip-in-firefox"
    <<: [
    *machine_python3,
    *steps_run_browser_tests,
    ]

  browser_all_chrome_uat:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "uat"
      BROWSER: "chrome"
      TAGS: "--tags=~@dev-only --tags=~@stage-only --tags=~@eu-exit --tags=~@skip"
    <<: [
    *machine_python3,
    *steps_run_browser_tests,
    ]

  browser_all_firefox_uat:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "uat"
      BROWSER: "firefox"
      TAGS: "--tags=~@dev-only --tags=~@stage-only --tags=~@eu-exit --tags=~@skip --tags=~@skip-in-firefox"
    <<: [
    *machine_python3,
    *steps_run_browser_tests,
    ]

  browser_selected_chrome_uat:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "uat"
      BROWSER: "chrome"
      TAGS: "--tags=~@full --tags=~@dev-only --tags=~@stage-only --tags=~@eu-exit --tags=~@skip"
    <<: [
    *machine_python3,
    *steps_run_browser_tests,
    ]

  browser_selected_firefox_uat:
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "uat"
      BROWSER: "firefox"
      TAGS: "--tags=~@full --tags=~@dev-only --tags=~@stage-only --tags=~@eu-exit --tags=~@skip --tags=~@skip-in-firefox"
    <<: [
    *machine_python3,
    *steps_run_browser_tests,
    ]

  load_cms_tests_stage:
    working_directory: ~/directory-tests
    environment:
      SERVICE: "cms"
      TEST_ENV: "stage"
      <<: [
      *load_hatch_rate,
      *load_num_clients,
      *load_run_time,
      ]
    <<: [
    *machine_python3,
    *steps_run_load_tests,
    ]

  load_soo_tests_stage:
    working_directory: ~/directory-tests
    environment:
      SERVICE: "soo"
      TEST_ENV: "stage"
      <<: [
      *load_hatch_rate,
      *load_num_clients,
      *load_run_time,
      ]
    <<: [
    *machine_python3,
    *steps_run_load_tests,
    ]

  load_fab_tests_stage:
    working_directory: ~/directory-tests
    environment:
      SERVICE: "fab"
      TEST_ENV: "stage"
      <<: [
      *load_hatch_rate,
      *load_num_clients,
      *load_run_time,
      ]
    <<: [
    *machine_python3,
    *steps_run_load_tests,
    ]

  load_fas_tests_stage:
    working_directory: ~/directory-tests
    environment:
      SERVICE: "fas"
      TEST_ENV: "stage"
      <<: [
      *load_hatch_rate,
      *load_num_clients,
      *load_run_time,
      ]
    <<: [
    *machine_python3,
    *steps_run_load_tests,
    ]

  load_isd_tests_stage:
    working_directory: ~/directory-tests
    environment:
      SERVICE: "isd"
      TEST_ENV: "stage"
      <<: [
      *load_hatch_rate,
      *load_num_clients,
      *load_run_time,
      ]
    <<: [
    *machine_python3,
    *steps_run_load_tests,
    ]

  load_international_tests_stage:
    working_directory: ~/directory-tests
    environment:
      SERVICE: "international"
      TEST_ENV: "stage"
      <<: [
      *load_hatch_rate,
      *load_num_clients,
      *load_run_time,
      ]
    <<: [
    *machine_python3,
    *steps_run_load_tests,
    ]

  load_invest_tests_stage:
    working_directory: ~/directory-tests
    environment:
      SERVICE: "invest"
      TEST_ENV: "stage"
      <<: [
      *load_hatch_rate,
      *load_num_clients,
      *load_run_time,
      ]
    <<: [
    *machine_python3,
    *steps_run_load_tests,
    ]

  load_search_tests_stage:
    working_directory: ~/directory-tests
    environment:
      SERVICE: "search"
      TEST_ENV: "stage"
      <<: [
      *load_hatch_rate,
      *load_num_clients,
      *load_run_time,
      ]
    <<: [
    *machine_python3,
    *steps_run_load_tests,
    ]

  load_erp_tests_stage:
    working_directory: ~/directory-tests
    environment:
      SERVICE: "erp"
      TEST_ENV: "stage"
      <<: [
      *load_hatch_rate,
      *load_num_clients,
      *load_run_time,
      ]
    <<: [
    *machine_python3,
    *steps_run_load_tests,
    ]

  # https://circleci.com/docs/2.0/docker-compose/
  dev_parallel_browser_tests:
    <<: [
    *machine_python3
    ]
    working_directory: ~/directory-tests
    environment:
      TEST_ENV: "dev"
    steps:
      - checkout
      - run:
          name: Install JRE as it is required by Allure to generate an HTML report
          command: |
            sudo apt -qq install -y default-jre
            java -version
      - run:
          name: Create virtualenv and install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --quiet --upgrade pip
            pip install --quiet docopt nodeenv
            nodeenv --python-virtualenv
            npm install -g allure-commandline@2.13.0
            npm install -g yarn@1.21.1
            yarn add -D klank@0.0.5
      - run:
          name: Generate docker environment file
          command: |
            set -e
            . venv/bin/activate
            python ./docker/env_writer.py --env=${TEST_ENV} --config=./docker/env.json
      - setup_remote_docker
      - run:
          name: Start Selenium hub, Chrome, Firefox, Redis & worker containers
          command: |
            set -e
            docker-compose \
              --file docker-compose-parallel-browser-tests.yml \
              --project-name pbt \
              up \
              --detach \
              --quiet-pull \
              --scale worker=8 \
              --scale=firefox=4 \
              --scale=chrome=4
            echo "Status of all containers"
            docker ps -a --format "table {{.Names}}\t{{.ID}}\t{{.Status}}\t{{.CreatedAt}}\t{{.Image}}\t{{.Ports}}"
      - run:
          name: Create test tasks & monitor the queue
          command: |
            set -e
            echo "Status of all containers"
            docker ps -a --format "table {{.Names}}\t{{.ID}}\t{{.Status}}\t{{.CreatedAt}}\t{{.Image}}\t{{.Ports}}"
            echo "Starting test loader..."
            docker-compose \
              --file docker-compose-parallel-browser-tests-loader.yml \
              --project-name pbt \
              up \
              --quiet-pull
      - run:
          name: Print browser logs
          when: always
          command: |
            set -e
            RED='\033[0;31m'
            NC='\033[0m' # No Color
            docker ps -a --format "table {{.Names}}" | grep "chrome\|firefox" | sort | while IFS=$'\r' read -r container_name ; do
              echo -e "Logs from ${RED}${container_name}${NC}"
              docker logs ${container_name}
            done
      - run:
          name: Print worker logs
          when: always
          command: |
            set -e
            RED='\033[0;31m'
            NC='\033[0m' # No Color
            docker ps -a --format "table {{.Names}}" | grep worker | sort | while IFS=$'\r' read -r container_name ; do
              echo -e "Logs from ${RED}${container_name}${NC}"
              docker logs ${container_name}
            done
      - run:
          name: Fetch Allure test results
          when: always
          command: |
            set -e
            echo "Status of all containers"
            docker ps -a --format "table {{.Names}}\t{{.ID}}\t{{.Status}}\t{{.CreatedAt}}\t{{.Image}}\t{{.Ports}}"
            echo "Fetching Allure test results from all workers..."
            docker ps -a --format "table {{.Names}}" | grep worker | sort | while IFS=$'\r' read -r container_name ; do
              docker exec ${container_name} [ -d "/home/celery/chrome_results" ] \
                && echo "Fetching Chrome Allure results from ${container_name}..."; docker cp ${container_name}:/home/celery/chrome_results . \
                || echo "There are no Chrome Allure results in ${container_name}"
              docker exec ${container_name} [ -d "/home/celery/firefox_results" ] \
                && echo "Fetching Firefox Allure results from ${container_name}..."; docker cp ${container_name}:/home/celery/firefox_results . \
                || echo "There are no Firefox Allure results in ${container_name}"
            done
      - run:
          name: Update Allure result files and generate an Allure report
          when: always
          command: |
            set -e
            cp ./parallel_browser_tests/makefile .
            cp ./parallel_browser_tests/update_results.py .
            . venv/bin/activate
            make results
            make report
      - run:
          name: Stop and remove all containers, networks, images and volumes
          when: always
          command: |
            set -e
            echo "Container status"
            docker ps -a --format "table {{.Names}}\t{{.ID}}\t{{.Status}}\t{{.CreatedAt}}\t{{.Image}}\t{{.Ports}}"
            echo "Stopping containers..."
            docker-compose \
              --file docker-compose-parallel-browser-tests.yml \
              --project-name pbt \
              down
      - store_artifacts:
          path: /home/circleci/directory-tests/report/
      - run:
          name: Push repot link to Slack
          command: |
            set -e
            . venv/bin/activate
            nodeenv --python-virtualenv
            export CIRCLE_PULL_REQUEST=none
            yarn klank

  dev_parallel_browser_tests_using_circleci:
    docker:
      - image: circleci/python:3.8.0-node-browsers
    working_directory: ~/directory-tests
    parallelism: 4
    environment:
      TEST_ENV: "dev"
      AUTO_RETRY: "true"
    steps:
      - checkout
      - run:
          name: Run tests
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --quiet --upgrade pip
            pip install --quiet -r requirements_browser.txt
            python ./docker/env_writer.py --env=${TEST_ENV} --config=./docker/env.json
            source ./docker/.env_with_export
            export PATH=$PATH:$HOME/bin
            if [ $(expr ${CIRCLE_NODE_INDEX} % 2) = 0 ];
            then
                export BROWSER="chrome";
            else
                export BROWSER="firefox";
            fi

            cd tests/browser
            PYTHONPATH=. behave \
              --dry-run \
              --no-source \
              --no-summary \
              --no-snippets \
              --tags=~@wip \
              --tags=~@fixme \
              --tags=~@skip \
              --format=mini \
              features/domestic/header_footer.feature \
              | grep -v "Supplied path\|Trying base directory" > scenario_titles.txt

            cat scenario_titles.txt \
              | circleci tests split > /tmp/tests-to-run

            echo "Current instance of Chrome is going to run `cat /tmp/tests-to-run | wc -l` scenarios:"
            cat /tmp/tests-to-run

            cat /tmp/tests-to-run | while IFS=$'\r' read -r title ; do
              echo "${BROWSER} will run: '${title}'"
              PYTHONPATH=. behave features/ \
              --format=allure_behave.formatter:AllureFormatter \
              --outfile=${BROWSER}_${CIRCLE_NODE_INDEX}_results/ \
              --format=progress3 \
              --no-skipped \
              --tags=~@wip \
              --tags=~@fixme \
              --tags=~@skip \
              --tags=~@stage-only \
              --name "${title}" && {
                echo "${BROWSER} passed: ${title}"
              } || {
                echo "${BROWSER} failed: ${title}"
              }
            done
            pwd
            ls -la
      - persist_to_workspace:
          root: tests/browser/
          paths:
            - chrome_?_results/*
            - firefox_?_results/*

  merge_results_and_generate_report:
    docker:
      - image: circleci/python:3.8.0-node-browsers
    working_directory: ~/directory-tests
    steps:
      - run:
          name: Install JRE as it is required by Allure to generate an HTML report
          command: |
            sudo apt -qq install -y default-jre
            java -version
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Create virtualenv and install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --quiet --upgrade pip
            pip install --quiet docopt nodeenv
            nodeenv --python-virtualenv
            npm install -g allure-commandline@2.13.0
            npm install -g yarn@1.21.1
            yarn add -D klank@0.0.5
      - run:
          name: Update Allure result files and generate an Allure report
          when: always
          command: |
            set -e
            pwd
            ls -la
            ls -la chrome_0_results/
            ls -la chrome_2_results/
            ls -la firefox_1_results/
            ls -la firefox_3_results/
            . venv/bin/activate
            make results
            make report
      - store_artifacts:
          path: /home/circleci/directory-tests/report/
      - run:
          name: Push repot link to Slack
          command: |
            set -e
            . venv/bin/activate
            nodeenv --python-virtualenv
            export CIRCLE_PULL_REQUEST=none
            yarn klank


workflows:
  version: 2

#  run_smoke_all_functional_and_selected_browser_tests_on_dev:
#    jobs:
#      - setup_env_for_smoke_tests
#      - setup_env_for_functional_tests
#      - setup_env_for_browser_tests
#      - delete_test_data_dev:
#          requires:
#            - setup_env_for_functional_tests
#            - setup_env_for_browser_tests
#      - smoke_tests_dev:
#          requires:
#            - setup_env_for_smoke_tests
#      - func_fas_test_dev:
#          requires:
#            - delete_test_data_dev
#      - func_international_test_dev:
#          requires:
#            - delete_test_data_dev
#      - func_sso_test_dev:
#          requires:
#            - delete_test_data_dev
#      - func_sud_test_dev:
#          requires:
#            - delete_test_data_dev
#      - browser_selected_chrome_dev:
#          requires:
#            - delete_test_data_dev
#      - browser_selected_firefox_dev:
#          requires:
#            - delete_test_data_dev

#  run_smoke_all_functional_and_selected_browser_tests_on_stage:
#    jobs:
#      - setup_env_for_smoke_tests
#      - setup_env_for_functional_tests
#      - setup_env_for_browser_tests
#      - delete_test_data_stage:
#          requires:
#            - setup_env_for_functional_tests
#            - setup_env_for_browser_tests
#      - smoke_tests_stage:
#          requires:
#            - setup_env_for_smoke_tests
#      - func_fas_test_stage:
#          requires:
#            - delete_test_data_stage
#      - func_international_test_stage:
#          requires:
#            - delete_test_data_stage
#      - func_sso_test_stage:
#          requires:
#            - delete_test_data_stage
#      - func_sud_test_stage:
#          requires:
#            - delete_test_data_stage
#      - browser_selected_chrome_stage:
#          requires:
#            - delete_test_data_stage
#      - browser_selected_firefox_stage:
#          requires:
#            - delete_test_data_stage

#  run_smoke_all_functional_and_selected_browser_tests_on_uat:
#    jobs:
#      - setup_env_for_smoke_tests
#      - setup_env_for_functional_tests
#      - setup_env_for_browser_tests
#      - delete_test_data_uat:
#          requires:
#            - setup_env_for_functional_tests
#            - setup_env_for_browser_tests
#      - smoke_tests_uat:
#          requires:
#            - setup_env_for_smoke_tests
#      - func_fas_test_uat:
#          requires:
#            - delete_test_data_uat
#      - func_international_test_uat:
#          requires:
#            - delete_test_data_uat
#      - func_sso_test_uat:
#          requires:
#            - delete_test_data_uat
#      - func_sud_test_uat:
#          requires:
#            - delete_test_data_uat
#      - browser_selected_chrome_uat:
#          requires:
#            - delete_test_data_uat
#      - browser_selected_firefox_uat:
#          requires:
#            - delete_test_data_uat

  run_cms_load_tests_on_stage:
    triggers:
    - schedule:
        cron: "3 4 * * 1-5"
        filters:
          branches:
            only: master
    jobs:
    - setup_env_for_load_tests
    - load_cms_tests_stage:
        requires:
        - setup_env_for_load_tests

  run_fas_load_tests_on_stage:
    triggers:
    - schedule:
        cron: "8 4 * * 1-5"
        filters:
          branches:
            only: master
    jobs:
    - setup_env_for_load_tests
    - load_fas_tests_stage:
        requires:
        - setup_env_for_load_tests

  run_isd_load_tests_on_stage:
    triggers:
      - schedule:
          cron: "13 4 * * 1-5"
          filters:
            branches:
              only: master
    jobs:
      - setup_env_for_load_tests
      - load_isd_tests_stage:
          requires:
            - setup_env_for_load_tests

  run_international_load_tests_on_stage:
    triggers:
      - schedule:
          cron: "18 4 * * 1-5"
          filters:
            branches:
              only: master
    jobs:
      - setup_env_for_load_tests
      - load_international_tests_stage:
          requires:
            - setup_env_for_load_tests

  run_invest_load_tests_on_stage:
    triggers:
    - schedule:
        cron: "24 4 * * 1-5"
        filters:
          branches:
            only: master
    jobs:
    - setup_env_for_load_tests
    - load_invest_tests_stage:
        requires:
        - setup_env_for_load_tests

  run_fab_load_tests_on_stage:
    triggers:
    - schedule:
        cron: "29 4 * * 1-5"
        filters:
          branches:
            only: master
    jobs:
    - setup_env_for_load_tests
    - load_fab_tests_stage:
        requires:
        - setup_env_for_load_tests

  run_soo_load_tests_on_stage:
    triggers:
      - schedule:
          cron: "34 4 * * 1-5"
          filters:
            branches:
              only: master
    jobs:
      - setup_env_for_load_tests
      - load_soo_tests_stage:
          requires:
            - setup_env_for_load_tests

  run_search_load_tests_on_stage:
    triggers:
      - schedule:
          cron: "39 4 * * 1-5"
          filters:
            branches:
              only: master
    jobs:
      - setup_env_for_load_tests
      - load_search_tests_stage:
          requires:
            - setup_env_for_load_tests

  run_erp_load_tests_on_stage:
    triggers:
      - schedule:
          cron: "44 4 * * 1-5"
          filters:
            branches:
              only: master
    jobs:
      - setup_env_for_load_tests
      - load_erp_tests_stage:
          requires:
            - setup_env_for_load_tests

  run_all_tests_on_dev:
    triggers:
    - schedule:
        cron: "0 5 * * 1-5"
        filters:
          branches:
            only: master
    jobs:
      - setup_env_for_smoke_tests
      - setup_env_for_functional_tests
      - setup_env_for_browser_tests
      - delete_test_data_dev:
          requires:
            - setup_env_for_functional_tests
            - setup_env_for_browser_tests
      - smoke_tests_dev:
          requires:
            - setup_env_for_smoke_tests
      - func_fas_test_dev:
          requires:
            - delete_test_data_dev
      - func_international_test_dev:
          requires:
            - delete_test_data_dev
      - func_sso_test_dev:
          requires:
            - delete_test_data_dev
      - func_sud_test_dev:
          requires:
            - delete_test_data_dev
      - browser_all_chrome_dev:
          requires:
            - delete_test_data_dev
      - browser_all_firefox_dev:
          requires:
            - delete_test_data_dev

  run_all_tests_on_stage:
    triggers:
    - schedule:
        cron: "0 9 * * 1-5"
        filters:
          branches:
            only: master
    jobs:
      - setup_env_for_smoke_tests
      - setup_env_for_functional_tests
      - setup_env_for_browser_tests
      - delete_test_data_stage:
          requires:
            - setup_env_for_functional_tests
            - setup_env_for_browser_tests
      - smoke_tests_stage:
          requires:
            - setup_env_for_smoke_tests
      - func_fas_test_stage:
          requires:
            - delete_test_data_stage
      - func_international_test_stage:
          requires:
            - delete_test_data_stage
      - func_sso_test_stage:
          requires:
            - delete_test_data_stage
      - func_sud_test_stage:
          requires:
            - delete_test_data_stage
      - browser_all_chrome_stage:
          requires:
            - delete_test_data_stage
      - browser_all_firefox_stage:
          requires:
            - delete_test_data_stage

  run_all_tests_on_uat:
    triggers:
      - schedule:
          cron: "0 18 * * 1-5"
          filters:
            branches:
              only: master
    jobs:
      - setup_env_for_smoke_tests
      - setup_env_for_functional_tests
      - setup_env_for_browser_tests
      - delete_test_data_uat:
          requires:
            - setup_env_for_functional_tests
            - setup_env_for_browser_tests
      - smoke_tests_uat:
          requires:
            - setup_env_for_smoke_tests
      - func_fas_test_uat:
          requires:
            - delete_test_data_uat
      - func_international_test_uat:
          requires:
            - delete_test_data_uat
      - func_sso_test_uat:
          requires:
            - delete_test_data_uat
      - func_sud_test_uat:
          requires:
            - delete_test_data_uat
      #- browser_all_chrome_uat:
          #requires:
            #- delete_test_data_uat
      #- browser_all_firefox_uat:
          #requires:
            #- delete_test_data_uat


  run_browser_tests_in_parallel_in_dev:
    jobs:
      - dev_parallel_browser_tests_using_circleci
      - merge_results_and_generate_report:
          requires:
            - dev_parallel_browser_tests_using_circleci
